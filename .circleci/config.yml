
version: 2

aliases:

  - &dev-branches
      - master
      - /^jeffo.*/

  - &staging-branches
      - master
      - /^jeffo.*/

  - &release-tags
      - /^v\d+\.\d+\.\d+/

  - &docker
      - image: circleci/python:3.7

  - &set-global-env
      name: Setup global environment variables
      command: |
        echo 'export DEPLOY_ENV_FILE=$BASH_ENV' >> $BASH_ENV
        #
        echo 'export DEPLOY_AWS_ACCOUNT_KEY=DEPLOY_AWS_ACCOUNT_$ENV_SUFFIX' >> $BASH_ENV
        echo 'export DEPLOY_AWS_ACCOUNT=${!DEPLOY_AWS_ACCOUNT_KEY}' >> $BASH_ENV
        #
        echo 'export DEPLOY_LAMBDA_EVENT_RULE="${DEPLOY_LAMBDA_EVENT_RULE:-rate(1 hour)}"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_NAME="ecstatic"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_ROLE="ecstatic_lambda"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_HANDLER="ecstatic.lambda_handler"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_RUNTIME="python3.7"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_TIMEOUT=120' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_MEMORY_SIZE=128' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_FUNCTION_ENV_TEMPLATE="/tmp/workspace/environment.txt"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_SOURCE_DIR="/tmp/workspace/build"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_TARGET_INPUT_JSON="{}"' >> $BASH_ENV
        echo 'export DEPLOY_LAMBDA_ZIP_VERSION="${CIRCLE_TAG:-}"' >> $BASH_ENV
        #
        echo 'export ECSTATIC_LOG_LEVEL=${ECSTATIC_LOG_LEVEL:-DEBUG}' >> $BASH_ENV

  - &deployables-install
    name: Install deployment dependencies
    command: |
      npm install -g https://github.com/firstlookmedia/deployables

  # test

  - &test
    docker: *docker
    steps:
      - checkout
      - run:
          name: check requirements
          command: |
            virtualenv venv
            source venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: check syntax
          command: |
            source venv/bin/activate
            python -m py_compile *.py
      - run:
          name: run pylint
          command: |
            source venv/bin/activate
            pip install pylint
            pylint *.py || true


  # build

  - &build
    docker: *docker
    steps:
      - checkout
      - run:
          name: build app
          command: |
            mkdir ./build
            cp ./*.py ./build
            pip install -r requirements.txt --target=./build
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./environment.txt
            - ./build

  # deploy

  - &deploy
    machine:
      image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: *set-global-env
      - run: *deployables-install
      - run:
          name: deploy lambda
          command: |
            $( npm bin -g)/deployables lambda_deploy
      - run:
          name: copy zip to s3
          command: |
            [[ -z "${COPY_ZIP_TO_S3}" ]] \
              && echo "Skipping upload to S3" \
              || $( npm bin -g)/deployables lambda_copy_zip_to_s3

#
# workflows
#
workflows:
  version: 2

  main:
    jobs:

      - build_app:
          filters:
            tags:
              only:
                - /.*/

      - test_app:
          filters:
            tags:
              only:
                - /.*/

      - deploy_dev:
          requires:
            - test_app
            - build_app
          filters:
            tags:
              only: *release-tags
            branches:
              only: *dev-branches

      - deploy_staging:
          requires:
            - test_app
            - build_app
          filters:
            tags:
              only: *release-tags
            branches:
              only: *staging-branches

      - deploy_prod:
          requires:
            - test_app
            - build_app
          filters:
            tags:
              only: *release-tages
            branches:
              ignore:
                - /.*/


#
# jobs
#
jobs:

  # test
  test_app:
    <<: *test

  # build
  build_app:
    <<: *build

  # dev
  deploy_dev:
    environment:
      ENV_SUFFIX: "DEV"
    <<: *deploy

  # staging
  deploy_staging:
    environment:
      ENV_SUFFIX: "STAGING"
    <<: *deploy

  # prod
  deploy_prod:
    environment:
      ENV_SUFFIX: "PROD"
      COPY_ZIP_TO_S3: 1
      ECSTATIC_LOG_LEVEL: "INFO"
    <<: *deploy
